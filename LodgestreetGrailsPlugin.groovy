class LodgestreetGrailsPlugin {
    // the plugin version
    def version = "0.1"
    // the version or versions of Grails the plugin is designed for
    def grailsVersion = "2.0 > *"
    // the other plugins this plugin depends on
    def dependsOn = [:]
    // resources that are excluded from plugin packaging
    def pluginExcludes = [
        "grails-app/views/error.gsp"
    ]

    // TODO Fill in these fields
    def title = "Lodgestreet Plugin" // Headline display name of the plugin
    def author = "John Layton"
    def authorEmail = ""
    def description = '''\
Adds the following to List;

toTree({ prop([]) })

The Closure passed to the toTree method is used to
construct a Tree then the List is evaluated against
this Tree to produce a Map of Maps.

It is possible in the closure to customise the
following;

Leaf nodes (Map) may be generated by evaluating;

1. A String containing a comma delimited list of fields
   evaluated on the objects in the list ie:

   [...].toTree({ leaf "prop1<,prop2..n>" })

2. A String Array containing the fields
   evaluated on the objects in the list ie:

   [...].toTree({ leaf "prop1"<,"prop2..n"> })

3. A String List containing the fields
   evaluated on the objects in the list ie:

   [...].toTree({ leaf(["prop1"<,"prop2..n">]) })

4. A Closure describing the behavior to be
   evaluated on the objects in the list ie:

   [...].toTree({ leaf {obj -> [prop1: ojb.prop1] } })

Nodes (Map of Maps) may be generated to an arbitrary
depth by evaluating;

1. A String containing a comma delimited list of fields
   evaluated on the objects in the list ie:

   [...].toTree({ prop "prop1<,prop2..n>" })

2. A String Array containing the fields
   evaluated on the objects in the list ie:

   [...].toTree({ prop "prop1"<,"prop2..n"> })

3. A String List containing the fields
   evaluated on the objects in the list ie:

   [...].toTree({ prop(["prop1"<,"prop2..n">]) })

4. A Closure describing the behavior to be
   evaluated on the objects in the list ie:

   [...].toTree({ clos {obj -> ojb.prop1 as String } })

4. A List of Closure describing the behavior to be
   evaluated on the objects in the list ie:

   [...].toTree({ clos([
      {obj -> ojb.prop1 as String },
      {obj -> ojb.prop2 as String },
   ]})

Adds the following TagLib;

1. A Tag to render a Map without formatting eg:

   <tree:tree data="${map}" title="${title}" />

   <h3>title</h3>
   <ol>
     <li>Node .1.
       <ol>
         <li>Node .2.
           <ol>
             <li>Leaf .1.</li>
             <li>Leaf .2.</li>
           </ol>
         </li>
       </ol>
     </li>
     <li>Node .2.
       <ol>...</ol>
     </li>
   </ol>

2. A Tag to render a Map with leaf formatting eg:

   <tree:tree data="${map}" title="${title}" />
              leaf="${ { leaf -> "${leaf}"  } }"/>

3. A Tag to render a Map with node formatting eg:

   <tree:tree data="${map}" title="${title}" />
              node="${ { node -> "${node}"  } }"/>
'''

    // URL to the plugin's documentation
    def documentation = "http://grails.org/plugin/lodgestreet"

    // Extra (optional) plugin metadata

    // License: one of 'APACHE', 'GPL2', 'GPL3'
//    def license = "APACHE"

    // Details of company behind the plugin (if there is one)
//    def organization = [ name: "My Company", url: "http://www.my-company.com/" ]

    // Any additional developers beyond the author specified above.
//    def developers = [ [ name: "Joe Bloggs", email: "joe@bloggs.net" ]]

    // Location of the plugin's issue tracker.
//    def issueManagement = [ system: "JIRA", url: "http://jira.grails.org/browse/GPMYPLUGIN" ]

    // Online location of the plugin's browseable source code.
//    def scm = [ url: "http://svn.grails-plugins.codehaus.org/browse/grails-plugins/" ]

    def doWithWebDescriptor = { xml ->
        // TODO Implement additions to web.xml (optional), this event occurs before
    }

    def doWithSpring = {
        // TODO Implement runtime spring config (optional)
    }

    def doWithDynamicMethods = { ctx ->
        // TODO Implement registering dynamic methods to classes (optional)
    }

    def doWithApplicationContext = { applicationContext ->
        // TODO Implement post initialization spring config (optional)
    }

    def onChange = { event ->
        // TODO Implement code that is executed when any artefact that this plugin is
        // watching is modified and reloaded. The event contains: event.source,
        // event.application, event.manager, event.ctx, and event.plugin.
    }

    def onConfigChange = { event ->
        // TODO Implement code that is executed when the project configuration changes.
        // The event is the same as for 'onChange'.
    }

    def onShutdown = { event ->
        // TODO Implement code that is executed when the application shuts down (optional)
    }
}
